// external
// external
use pyo3::prelude::*;
use rand::Rng;

use crate::misc::hist_memory;

#[pyclass]
#[derive(Clone)]
pub struct TMSEngine {
    #[pyo3(get)]
    pow_e: f32,  // electrical power of tms engine [W]
    #[pyo3(get)]
    pow_t: f32,  // installed power of tms engine [W]
    #[pyo3(get)]
    efficiency: f32, // total efficiency of tms 0 .. 1

    state: bool,  // on/off switch for tms engine

    #[pyo3(get)]
    gen_t: Option<hist_memory::HistMemory>,
    #[pyo3(get)]
    gen_e: Option<hist_memory::HistMemory>,
    #[pyo3(get)]
    energy_used: Option<hist_memory::HistMemory>
}

#[pymethods]
impl TMSEngine {
    ///  Create TMS engine
    ///  Parameters are power of TMS engine
    ///  The technical design is based on norm heating load and hot water use.
    ///
    /// # Arguments
    /// * power_t (f32): installed thermal tms power [W]
    /// * hist (usize): Size of history memory (0 for no memory)
    #[new]
    pub fn new(power_t: f32, hist: usize) -> Self {

        if power_t < 0. {
            panic!("Installed thermal power of tms engine \
                    must be greater than 0")
        }

        let pow_t = power_t;
        let pow_e = 0.5 * pow_t;

        let state = false;

        let (gen_e, gen_t, energy_used) =
            if hist > 0 {
                (Some(hist_memory::HistMemory::new(hist)),
                 Some(hist_memory::HistMemory::new(hist)),
                 Some(hist_memory::HistMemory::new(hist)))
            } else {
                (None, None, None)
            };

        let mut rng = rand::thread_rng();
        let efficiency: f32 = rng.gen_range(0.8..=0.9);

        TMSEngine {pow_e,
             pow_t,
             state,
             efficiency,
             gen_e,
             gen_t,
             energy_used
             }
    }

    pub fn set_efficiency(&mut self, efficiency: f32) {
        if (efficiency < 0.) | (efficiency > 1.) {
            panic!("Efficiency must be between 0 and 1");
        } else {
            self.efficiency = efficiency;
        }
    }
}

/// TMS engine plant
impl TMSEngine {
    /// Calculate the fuel power needed to provide given electrical and thermal
    /// power.
    ///
    /// # Arguments
    /// * pow_e (f32): electrical power generated by tms engine [W]
    /// * pow_t (f32): thermal power generated by tms engine [W]
    ///
    /// # Returns
    /// f32: Power of fuel needed to provide given electrical and
    ///      thermal power [W]s
    fn get_energy(&self, pow_e: &f32, pow_t: &f32) -> f32 {
        (pow_e + pow_t) / self.efficiency
    }

    fn save_hist(&mut self, pow_e: &f32, pow_t: &f32, energy_used: &f32) {
        match &mut self.gen_e {
            None => {},
            Some(gen_e) => {
                gen_e.save(*pow_e)
            },
        }
        match &mut self.gen_t {
            None => {},
            Some(gen_t) => {
                gen_t.save(*pow_t)
            }
        }
        match &mut self.energy_used {
            None => {},
            Some(energy_used_hist) => {
                energy_used_hist.save(*energy_used)
            }
        }
    }

    /// Calculate current electrical and thermal power
    ///
    /// # Arguments
    /// * state (&bool): Current state of TMS engine plant (on/off)
    ///
    /// # Returns
    /// * (f32, f32, f32): Resulting electrical and thermal power and fuel used [W]
    pub fn step(&mut self, state: &bool) -> (f32, f32, f32) {

        // update state
        self.state = *state;

        // calculate power output
        let pow_t;
        let pow_e;
        if self.state {
            pow_t = self.pow_t;
            pow_e = self.pow_e;
        }
        else {
            pow_t = 0.0;
            pow_e = 0.0;
        }

        let energy_used = self.get_fuel(&pow_e, &pow_t);
        // save and return data
        self.save_hist(&pow_e, &pow_t, &energy_used);

        return (pow_e, pow_t, energy_used);
    }
}